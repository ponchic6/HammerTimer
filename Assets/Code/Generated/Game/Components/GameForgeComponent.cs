//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Gameplay.Produce.Forge.ForgeComponent forge { get { return (Code.Gameplay.Produce.Forge.ForgeComponent)GetComponent(GameComponentsLookup.Forge); } }
    public bool hasForge { get { return HasComponent(GameComponentsLookup.Forge); } }

    public void AddForge(float newCoal, float newTemperature) {
        var index = GameComponentsLookup.Forge;
        var component = (Code.Gameplay.Produce.Forge.ForgeComponent)CreateComponent(index, typeof(Code.Gameplay.Produce.Forge.ForgeComponent));
        component.Coal = newCoal;
        component.Temperature = newTemperature;
        AddComponent(index, component);
    }

    public void ReplaceForge(float newCoal, float newTemperature) {
        var index = GameComponentsLookup.Forge;
        var component = (Code.Gameplay.Produce.Forge.ForgeComponent)CreateComponent(index, typeof(Code.Gameplay.Produce.Forge.ForgeComponent));
        component.Coal = newCoal;
        component.Temperature = newTemperature;
        ReplaceComponent(index, component);
    }

    public void RemoveForge() {
        RemoveComponent(GameComponentsLookup.Forge);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherForge;

    public static Entitas.IMatcher<GameEntity> Forge {
        get {
            if (_matcherForge == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.Forge);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherForge = matcher;
            }

            return _matcherForge;
        }
    }
}
